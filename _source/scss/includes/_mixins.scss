@mixin font-etica($styling: false) {
  font-family: 'lft-etica', 'Oswald', sans-serif !important;

  @if ($styling) {
    letter-spacing: -.055em !important;
    font-style: italic !important;
    line-height: .9 !important;
    text-transform: uppercase !important;
  }
}

@mixin fancy-hover($link-text: $black, $hover-bg: $lightgrey, $hover-text: $black) {
  background-size: 200.22% auto;
  background-position: -0% 0;
  background-image: linear-gradient(to right, rgba(#fff,0) 50%, $hover-bg 50%);
  color: $link-text !important;
  transition: all .3s ease;

  &:hover {
    background-position: -99.99% 0;
    color: $hover-text !important;
  }
}

@mixin clearfix {
  &:after {
    visibility: hidden;
    display: block;
    font-size: 0;
    content: ' ';
    clear: both;
    height: 0;
  }
}

@function longshadow($color) {
  $val: 0px 0px $color;
  @for $i from 1 through 200 {
    $val: #{$val}, #{$i}px #{$i}px #{$color};
  }
  @return $val;
}

// @function long-shadow($direction, $length, $color, $fade: false, $shadow-count: 100) {
//   $shadows: ();
//   $conversion-map: (
//     to top: 180deg,
//     to top right: 135deg,
//     to right top: 135deg,
//     to right: 90deg,
//     to bottom right: 45deg,
//     to right bottom: 45deg,
//     to bottom: 0deg,
//     to bottom left: 315deg,
//     to left bottom: 315deg,
//     to left: 270deg,
//     to left top: 225deg,
//     to top left: 225deg
//   );
//
//   @if map-has-key($conversion-map, $direction) {
//     $direction: map-get($conversion-map, $direction);
//   }
//
//   @for $i from 1 through $shadow-count {
//     $current-step: ($i * $length / $shadow-count);
//     $current-color: if(not $fade, $color, if(type-of($fade) == 'color',  mix($fade, $color, ($i / $shadow-count * 100)), rgba($color, 1 - $i / $shadow-count)));
//
//     $shadows: append($shadows, (sin(0deg + $direction) * $current-step) (cos(0deg + $direction) * $current-step) 0 $current-color, 'comma');
//   }
//
//   @return $shadows;
// }
